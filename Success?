def list_from_file(file_name):  # Returns "DATA"
    file_pointer = open(file_name, 'r')
    data = file_pointer.readlines()
    new_data = []
    for i in range(len(data)):
        temp_string = ''
        for j in range(len(data[i]) - 1):
            temp_string = temp_string + data[i][j]
        if temp_string != '':
            if i >= len(data) - 2:
                new_data.append(temp_string)
            else:
                new_data.append(temp_string.lower())
    return new_data

def is_rows(data):
    if ord(data[1][0]) >= 97:
        return True
    else:
        return False
def dic_for_cols(data):
    names = []
    name = ''
    dic = {}
    for i in data[0]:
        if i != ' ':
            name = name + i
        else:
            names.append(name)
            name = ''
    names.append(name)
    for name in range(len(names)):
        my_list = []  # The list of the specific parameter such as x or dy values.
        for value_row in range(1 ,len(data) - 2):
            value_list = []
            whole_value = ''
            for value in data[value_row]:  # Builds "Whole Values"
                if value != ' ':
                    whole_value = whole_value + value
                else:
                    value_list.append(float(whole_value))
                    whole_value = ''
            value_list.append(float(whole_value))
            my_list.append(value_list[name])
        dic[names[name]] = my_list
    return dic
def dic_for_rows(data):
    names = []
    name = ''
    dic = {}
    for row in range(4):
        for i in data[row]:
            if i != ' ':
                name = name + i
            else:
                names.append(name)
                name = ''
                break
    for row in range(len(names)):
        value_list = []
        whole_value = ''
        for value in data[row]:  # Builds "Whole Values"
            if value != ' ':
                whole_value = whole_value + value
            elif whole_value in names:
                whole_value = ''
            else:
                value_list.append(float(whole_value))
                whole_value = ''
        value_list.append(float(whole_value))
        dic[names[row]] = value_list
    return dic
def data_to_dic(data):  # Returns a dictionary of x/dy as keys and lists of their values
    if is_rows(data):
        return dic_for_rows(data)
    else:
        return dic_for_cols(data)
def is_length_ok(data):
    data = data[:len(data) - 2]
    certain_list = data[0].split()
    for string in data:
        my_list = string.split()
        if len(my_list) != len(certain_list):
            return False
    return True

def is_sigma_ok(dic):
    for i in ['dy','dx']:
        for j in dic[i]:
            if j <= 0:
                return False
    return True
def gag(z_list,dy_list):
    first_sum = 0
    second_sum = 0
    for value_number in range(len(z_list)):
        first_sum += (z_list[value_number]/(dy_list[value_number]**2))
    for dy in dy_list:
        second_sum += (1/dy)**2
    return first_sum/second_sum
def find_a_and_da(dic):
    x_squared = []
    x_times_y = []
    dy_squared = []
    for i in range(len(dic['x'])):
        x_squared.append(dic['x'][i]**2)
        x_times_y.append(dic['x'][i]*dic['y'][i])
        dy_squared.append(dic['dy'][i] ** 2)
    a = (gag(x_times_y,dic['dy']) - gag(dic['x'],dic['dy'])*gag(dic['y'],dic['dy']))/(gag(x_squared,dic['dy'])-(gag(dic['x'],dic['dy']))**2)
    da = ((gag(dy_squared,dic['dy']))/(len(dic['x'])*(gag(x_squared,dic['dy'])-gag(dic['x'],dic['dy'])**2)))**0.5
    # I apologize for the long hard-to-look-at lines of this part! :(
    return (a,da)
def find_b_and_db(dic):
    b = gag(dic['y'],dic['dy']) - find_a_and_da(dic)[0]*gag(dic['x'],dic['dy'])
    x_squared = []
    dy_squared = []
    for i in range(len(dic['x'])):
        x_squared.append(dic['x'][i] ** 2)
        dy_squared.append(dic['dy'][i] ** 2)
    db = ((gag(dy_squared,dic['dy'])*gag(x_squared,dic['dy']))/(len(dic['dy'])*(gag(x_squared,dic['dy'])-(gag(dic['x'],dic['dy'])**2))))**0.5
    return(b,db)
def find_chi_and_chi_reduced(dic,a,b):
    chi = 0
    N = len(dic['x'])
    for n in range(N):
        chi += ((dic['y'][n] - (a*dic['x'][n] + b))/(dic['dy'][n]))**2
    chi_red = chi/(N - 2)
    return(chi,chi_red)
def bonus_meme(dic,list_of_a,min_b): # Lacks the proccess of finding min_b hope you'll appriciate the thought behind it though!
    from matplotlib import pyplot as plt
    list_of_chi = []
    for a in list_of_a:
        list_of_chi.append(find_chi_and_chi_reduced(dic,a,min_b))
    plt.plot(list_of_a,list_of_chi,'b')
    plt.xlabel('a')
    plt.ylabel('chi2(a, b = ' + str(min_b) +')')
    plt.show()
data = list_from_file(input('Insert file name here:'))
length = is_length_ok(data)
if not length:
    print("Input file error: Data lists are not the same length.")
else:
    dic = data_to_dic(data)
    if not is_sigma_ok(dic):
        print("Input file error: Not all uncertainties are positive.")
    else:
        x_title = data[len(data) - 2].strip('x axis: ')
        y_title = data[len(data) - 1].strip('y axis: ')
        a = find_a_and_da(dic)
        b = find_b_and_db(dic)
        chi = find_chi_and_chi_reduced(dic,a[0],b[0])
        print('a = {a_value} +-{a_error}'.format(a_value = a[0], a_error = a[1]))
        print('b = {b_value} +-{b_error}'.format(b_value = b[0] , b_error = b[1]))
        print('chi2 = ' + str(chi[0]))
        print('chi2_reduced = ' + str(chi[1]))
        print(dic)
        #from matplotlib import pyplot
        import matplotlib.pyplot as plt

        x = dic['x']
        y = []
        for i in range(len(dic['x'])):
            y.append(a[0]*x[i] + b[0])
        yerr = dic['dy']
        xerr = dic['dx']
        plt.plot(x , y , 'r')
        plt.xlabel(x_title)
        plt.ylabel(y_title)
        plt.errorbar(x,y,yerr,xerr,ecolor='b',fmt = 'none' )
        plt.show()
        plt.savefig('linear_fit.svg', format='svg')
        bonus = bool(input("Do you want to plot the bonus part? (press 0 if no. you should decline for a decent working code :(")) # I let you decide wether to run it ro not..
        if not bonus:
            bonus_meme(dic,input('insert list of a please!'),input('insert a b value')) # It is incomplete, this is what I managed to do in the time I had...
